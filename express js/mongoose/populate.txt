   Project.find(query)
    .populate({ 
      path: 'pages',
      populate: [{
       path: 'components',
       model: 'Component'
      },{
        path: 'AnotherRef',
        model: 'AnotherRef',
        select: 'firstname lastname'
      }] 
   })
  -------------------------------------------------

Story.find(...).populate('fans').populate('author') 
Story.find().populate({ path: 'fans', select: 'name' }).populate({ path: 'fans', select: 'email' })
populate({
    path: 'fans',
    match: { age: { $gte: 21 } },
    // Explicitly exclude `_id`, see http://bit.ly/2aEfTdB
    select: 'name -_id'
  })
  
.populate({
  path: 'fans',
  options: { limit: 2 }
});

.populate({
  path: 'fans',
  // Special option that tells Mongoose to execute a separate query
  // for each `story` to make sure we get 2 fans for each story.
  perDocumentLimit: 2
});

.populate(['stories', 'fans'])
person.populated('fans')

//multilabel
  populate({
    path: 'friends',
    // Get friends of friends - populate the 'friends' array for every friend
    populate: { path: 'friends' }
  });

-----------------------------------------------------------------------

Populate Virtuals: The Count Option


const PersonSchema = new Schema({
  name: String,
  band: String
});

const BandSchema = new Schema({
  name: String
});
BandSchema.virtual('numMembers', {
  ref: 'Person', // The model to use
  localField: 'name', // Find people where `localField`
  foreignField: 'band', // is equal to `foreignField`
  count: true // And only get the number of docs
});

// Later
const doc = await Band.findOne({ name: 'Motley Crue' }).
  populate('numMembers');
doc.numMembers; // 2

--------------------------------------------------------------------------------

Populate in Middleware


MySchema.pre('find', function() {
  this.populate('user');
});

MySchema.post('find', async function(docs) {
  for (let doc of docs) {
    if (doc.isPublic) {
      await doc.populate('user');
    }
  }
});

MySchema.post('save', function(doc, next) {
  doc.populate('user').then(function() {
    next();
  });
});

